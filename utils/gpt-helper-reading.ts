import { GoogleGenerativeAI } from '@google/generative-ai';

function getGeminiClient() {
  const apiKey = process.env.GEMINI_API_KEY;
  if (!apiKey) throw new Error('‚ùå Missing GEMINI_API_KEY in environment variables');
  return new GoogleGenerativeAI(apiKey);
}

interface GenerateChineseReadingExerciseOptions {
  level: number;
  type: 'dialogue' | 'paragraph' | 'story';
  maxWords?: number;
  questionCount?: number;
  useDynamicPrompt?: boolean;
}

// C∆° s·ªü d·ªØ li·ªáu th√†nh ph·∫ßn ƒë·ªÉ t·∫°o prompt ƒë·ªông cho reading
interface ReadingPromptTemplate {
  themes: string[];
  scenarios: string[];
  characters: string[];
  settings: string[];
  plotElements: string[];
  emotions: string[];
  questionFocus: string[];
}

const READING_PROMPT_COMPONENTS: Record<number, ReadingPromptTemplate> = {
  1: {
    themes: [
      'ÂÆ∂Â∫≠Ê∏©ÊöñÊó∂ÂÖâ', 'Ê†°Âõ≠ÂèãË∞äÊïÖ‰∫ã', 'ÁæéÈ£üÊé¢Á¥¢‰πãÊóÖ', 
      'ËäÇÊó•Â∫ÜÁ•ùÊ¥ªÂä®', 'ÂÆ†Áâ©‰∏é‰∏ª‰∫∫', 'Ë¥≠Áâ©Â∞èÁªèÂéÜ'
    ],
    scenarios: [
      'Âë®Êú´ÂÆ∂Â∫≠ËÅöÈ§ê', 'Êñ∞ÂêåÂ≠¶ÂàùÊù•‰πçÂà∞', 'Á¨¨‰∏ÄÊ¨°Áã¨Ëá™‰π∞Ëèú',
      'ÁîüÊó•Ê¥æÂØπÂáÜÂ§á', 'ÁÖßÈ°æÂ∞èÂä®Áâ©', 'ÈÄâÊã©Á§ºÁâ©'
    ],
    characters: [
      'Â∞èÊòéÂíåÁà∏Áà∏Â¶àÂ¶à', 'Êñ∞Êù•ÁöÑËΩ¨Â≠¶ÁîüÂ∞èÁ∫¢', 'ÁÉ≠ÂøÉÁöÑÂ∫óÂëòÈòøÂß®',
      'ÂèØÁà±ÁöÑÂºüÂºüÂ¶πÂ¶π', 'ÈÇªÂ±ÖÂÆ∂ÁöÑËÄÅÁà∑Áà∑', 'Áè≠‰∏äÁöÑÂ•ΩÊúãÂèã'
    ],
    settings: [
      'Ê∏©È¶®ÁöÑÂÆ∂Â∫≠È§êÂéÖ', 'ÁÉ≠ÈóπÁöÑÂ≠¶Ê†°ÊìçÂú∫', 'ÁπÅÂøôÁöÑËèúÂ∏ÇÂú∫',
      'ÂÆâÈùôÁöÑÂõæ‰π¶È¶Ü', 'Áæé‰∏ΩÁöÑÂÖ¨Âõ≠', 'ÁÜüÊÇâÁöÑÊïôÂÆ§'
    ],
    plotElements: [
      'ÈÅáÂà∞Â∞èÂõ∞ÈöæÁÑ∂ÂêéËß£ÂÜ≥', 'Â≠¶‰ºöÊñ∞ÊäÄËÉΩ', 'Â∏ÆÂä©Âà´‰∫∫Ëé∑ÂæóÂø´‰πê',
      'ÂèëÁé∞ÊúâË∂£ÁöÑ‰∫ãÁâ©', 'ÂÖãÊúçÂÆ≥Áæû‰∫§Âà∞ÊúãÂèã', 'ÂÆåÊàêÁÆÄÂçï‰ªªÂä°'
    ],
    emotions: [
      'ÂºÄÂøÉÊª°Ë∂≥', 'ÊúâÁÇπÁ¥ßÂº†‰ΩÜÂæàÂÖ¥Â•ã', 'Ê∏©ÊöñÊÑüÂä®',
      'È™ÑÂÇ≤Ëá™Ë±™', 'Â•ΩÂ•áÊé¢Á¥¢', 'ÂèãÂñÑ‰∫≤Âàá'
    ],
    questionFocus: [
      '‰∫∫Áâ©ÂÖ≥Á≥ªÂíåÂü∫Êú¨‰ø°ÊÅØ', 'Êó∂Èó¥Âú∞ÁÇπÁ≠âÂÖ∑‰ΩìÁªÜËäÇ', 'ÁÆÄÂçïÁöÑÂõ†ÊûúÂÖ≥Á≥ª',
      '‰∫∫Áâ©ÁöÑÊÑüÂèóÂíåÊÄÅÂ∫¶', 'ÊïÖ‰∫ãÁöÑ‰∏ªË¶ÅÂÜÖÂÆπ'
    ]
  },
  2: {
    themes: [
      'ËÅåÂú∫Êñ∞‰∫∫ÈÄÇÂ∫îËÆ∞', 'ÊóÖË°å‰∏≠ÁöÑÊñáÂåñ‰ΩìÈ™å', 'ÂÖ¥Ë∂£Áà±Â•ΩÁöÑÊé¢Á¥¢',
      '‰∫∫ÈôÖÂÖ≥Á≥ªÁöÑÂèòÂåñ', 'ÁîüÊ¥ª‰π†ÊÉØÁöÑÊîπÂèò', 'Â≠¶‰π†ÊñπÊ≥ïÁöÑÂèëÁé∞'
    ],
    scenarios: [
      'Á¨¨‰∏ÄÂ§©‰∏äÁè≠ÁöÑÁªèÂéÜ', 'Áã¨Ëá™ÊóÖË°åÈÅáÂà∞ÁöÑË∂£‰∫ã', 'ÂèÇÂä†Á§æÂõ¢Ê¥ªÂä®',
      'Êê¨Âà∞Êñ∞ÂüéÂ∏ÇÁîüÊ¥ª', 'Â≠¶‰π†Êñ∞ÊäÄËÉΩÁöÑËøáÁ®ã', 'Âíå‰∏çÂêåÂπ¥ÈæÑ‰∫∫‰∫§ÂæÄ'
    ],
    characters: [
      'ÂàöÊØï‰∏öÁöÑÂ§ßÂ≠¶Áîü', 'ÁªèÈ™å‰∏∞ÂØåÁöÑÂâçËæà', 'Êù•Ëá™‰∏çÂêåÂú∞ÊñπÁöÑÊúãÂèã',
      'ÊúâË∂£ÁöÑÊàø‰∏ú', '‰∏ì‰∏öÁöÑÊïôÁªÉÊàñËÄÅÂ∏à', 'ÁÉ≠ÊÉÖÁöÑÂΩìÂú∞‰∫∫'
    ],
    settings: [
      'Áé∞‰ª£ÂåñÁöÑÂäûÂÖ¨ÂÆ§', 'È£éÊôØ‰ºòÁæéÁöÑÊóÖÊ∏∏ÊôØÁÇπ', 'ÂÖÖÊª°Ê¥ªÂäõÁöÑÂÅ•Ë∫´Êàø',
      'ÊñáËâ∫Ê∞îÊÅØÁöÑÂíñÂï°È¶Ü', 'ÂéÜÂè≤ÊÇ†‰πÖÁöÑËÄÅË°ó', 'ËÆæÂ§áÈΩêÂÖ®ÁöÑÂ≠¶‰π†‰∏≠ÂøÉ'
    ],
    plotElements: [
      'ÈÄöËøáÂä™ÂäõËææÊàêÁõÆÊ†á', 'Âú®ÊåëÊàò‰∏≠ÊàêÈïø', 'ÂèëÁé∞ÊÑèÂ§ñÁöÑÊú∫‰ºö',
      'Âª∫Á´ãÊñ∞ÁöÑÂèãË∞ä', 'ÊîπÂèòÂéüÊúâÁöÑÊÉ≥Ê≥ï', 'Ëé∑ÂæóÂÆùË¥µÁöÑÁªèÈ™å'
    ],
    emotions: [
      'ÊåëÊàò‰∏éÊàêÂ∞±Âπ∂Â≠ò', 'Á¥ßÂº†‰∏≠Â∏¶ÁùÄÊúüÂæÖ', 'ÊÑüË∞¢ÂíåÊÑüÂä®',
      'Ëá™‰ø°ÂíåÊª°Ë∂≥', 'Â•ΩÂ•á‰∏éÊé¢Á¥¢Ê¨≤', 'ÁêÜËß£‰∏éÂåÖÂÆπ'
    ],
    questionFocus: [
      '‰∫∫Áâ©ÁöÑÂä®Êú∫ÂíåÁõÆÊ†á', '‰∫ã‰ª∂ÂèëÂ±ïÁöÑÈÄªËæë', 'Ê∑±Â±ÇÁöÑÊÉÖÊÑüÂèòÂåñ',
      '‰∏çÂêåËßÇÁÇπÁöÑÂØπÊØî', 'ÁªèÈ™åÂíåÊïôËÆ≠ÁöÑÊÄªÁªì'
    ]
  },
  3: {
    themes: [
      'Ë∑®ÊñáÂåñ‰∫§ÊµÅ‰∏éÁêÜËß£', '‰∏™‰∫∫ÊàêÈïø‰∏é‰∫∫ÁîüÈÄâÊã©', 'ÁéØÂ¢É‰øùÊä§‰∏éÁ§æ‰ºöË¥£‰ªª',
      'ÁßëÊäÄÂèëÂ±ïÂØπÁîüÊ¥ªÁöÑÂΩ±Âìç', '‰º†ÁªüÊñáÂåñÂú®Áé∞‰ª£ÁöÑ‰º†Êâø', 'ÊïôËÇ≤ÁêÜÂøµÁöÑÊé¢ËÆ®'
    ],
    scenarios: [
      'ÂõΩÈôÖ‰∫§ÊµÅÈ°πÁõÆ‰∏≠ÁöÑÊñáÂåñÂÜ≤Á™Å‰∏éËûçÂêà', 'Èù¢‰∏¥ÈáçË¶Å‰∫∫ÁîüÂÜ≥Á≠ñÁöÑÊÄùËÄÉËøáÁ®ã',
      'ÂèÇ‰∏éÁéØ‰øùÊ¥ªÂä®ÁöÑÂøÉË∑ØÂéÜÁ®ã', '‰ΩìÈ™åÊñ∞ÁßëÊäÄÂ∏¶Êù•ÁöÑÁîüÊ¥ªÂèòÂåñ',
      'Êé¢Á¥¢‰º†ÁªüÊâãÂ∑•Ëâ∫ÁöÑÁé∞‰ª£‰ª∑ÂÄº', '‰∏çÂêåÊïôËÇ≤ÊñπÂºèÁöÑÊØîËæÉÂíåÂèçÊÄù'
    ],
    characters: [
      'Êù•Ëá™‰∏çÂêåÂõΩÂÆ∂ÁöÑ‰∫§ÊµÅÂ≠¶Áîü', 'Èù¢‰∏¥ËÅå‰∏öÈÄâÊã©ÁöÑÂπ¥ËΩª‰∫∫',
      'ÁéØ‰øùÂøóÊÑøËÄÖÂíåÁ§æÂå∫Â±ÖÊ∞ë', 'ÁßëÊäÄÂÖ¨Âè∏ÁöÑÁ†îÂèë‰∫∫Âëò',
      '‰º†ÁªüÊâãÂ∑•Ëâ∫‰∫∫ÂíåÁé∞‰ª£ËÆæËÆ°Â∏à', 'ÊïôËÇ≤Â∑•‰ΩúËÄÖÂíåÂ≠¶ÁîüÂÆ∂Èïø'
    ],
    settings: [
      'Â§öÂÖÉÊñáÂåñÁöÑÂõΩÈôÖÁéØÂ¢É', 'ÂÖÖÊª°Êú∫ÈÅáÁöÑÈÉΩÂ∏ÇÁîüÊ¥ª',
      'ÈúÄË¶Å‰øùÊä§ÁöÑËá™ÁÑ∂ÁéØÂ¢É', 'ÁßëÊäÄÂàõÊñ∞ÁöÑÁ†îÂèë‰∏≠ÂøÉ',
      'ÊâøËΩΩÂéÜÂè≤ÁöÑÊñáÂåñË°óÂå∫', 'ÊïôËÇ≤ËµÑÊ∫ê‰∏∞ÂØåÁöÑÂ≠¶ÊúØÁéØÂ¢É'
    ],
    plotElements: [
      'ÈÄöËøáÊ∑±ÂÖ•‰∫ÜËß£ÂåñËß£ËØØËß£', 'Âú®Â§çÊùÇÊÉÖÂÜµ‰∏ãÂÅöÂá∫ÁêÜÊÄßÈÄâÊã©',
      '‰ªé‰∏™‰∫∫Ë°åÂä®Êâ©Â±ïÂà∞Á§æ‰ºöÂΩ±Âìç', 'Âú®ÂèòÂåñ‰∏≠ÂØªÊâæÂπ≥Ë°°ÁÇπ',
      'Â∞Ü‰º†ÁªüÊô∫ÊÖß‰∏éÁé∞‰ª£ÈúÄÊ±ÇÁªìÂêà', 'ÈÄöËøáÂÆûË∑µÈ™åËØÅÁêÜËÆ∫ËßÇÁÇπ'
    ],
    emotions: [
      'Ê∑±Â∫¶ÊÄùËÄÉ‰∏éÁêÜËß£', 'Ë¥£‰ªªÊÑü‰∏é‰ΩøÂëΩÊÑü', 'Â∏åÊúõ‰∏éÊãÖÂøßÂπ∂Â≠ò',
      'ÂÖ¥Â•ã‰∏éË∞®ÊÖéÁöÑÂπ≥Ë°°', 'Êï¨‰Ω©‰∏é‰º†ÊâøÁöÑÊÑøÊúõ', 'ÂèçÊÄù‰∏éÊàêÈïøÁöÑÂñúÊÇ¶'
    ],
    questionFocus: [
      'Â§çÊùÇÊ¶ÇÂøµÁöÑÁêÜËß£‰∏éÂ∫îÁî®', 'Â§öËßíÂ∫¶ÂàÜÊûêÈóÆÈ¢ò', '‰ª∑ÂÄºËßÇÂøµÁöÑÊé¢ËÆ®',
      'Ë∂ãÂäøÈ¢ÑÊµã‰∏éÂΩ±ÂìçËØÑ‰º∞', '‰º†Áªü‰∏éÁé∞‰ª£ÁöÑÂÖ≥Á≥ª', 'ÊïôËÇ≤ÁêÜÂøµÁöÑÊ∑±Â±ÇÁêÜËß£'
    ]
  }
};

// H√†m t·∫°o prompt ƒë·ªông cho reading
function generateDynamicReadingPrompt(options: GenerateChineseReadingExerciseOptions): string {
  const { level, type, maxWords, questionCount = 5 } = options;
  const components = READING_PROMPT_COMPONENTS[level];
  
  const randomTheme = components.themes[Math.floor(Math.random() * components.themes.length)];
  const randomScenario = components.scenarios[Math.floor(Math.random() * components.scenarios.length)];
  const randomCharacters = components.characters[Math.floor(Math.random() * components.characters.length)];
  const randomSetting = components.settings[Math.floor(Math.random() * components.settings.length)];
  const randomPlot = components.plotElements[Math.floor(Math.random() * components.plotElements.length)];
  const randomEmotion = components.emotions[Math.floor(Math.random() * components.emotions.length)];
  const randomQuestionFocus = components.questionFocus[Math.floor(Math.random() * components.questionFocus.length)];

  const hskRequirements = {
    1: "Âè™‰ΩøÁî®HSK 1Á∫ßËØçÊ±áÔºà150‰∏™ÊúÄÂü∫Á°ÄËØçÊ±áÔºâÔºö‰∫∫Áß∞‰ª£ËØç„ÄÅÂü∫Êú¨Âä®ËØçÔºàÊòØ„ÄÅÊúâ„ÄÅÂéª„ÄÅÊù•„ÄÅÂêÉ„ÄÅÂñùÔºâ„ÄÅÊï∞Â≠ó„ÄÅÊó∂Èó¥„ÄÅÂÆ∂Â∫≠ÊàêÂëò„ÄÅÈ¢úËâ≤„ÄÅÁÆÄÂçïÂΩ¢ÂÆπËØçÁ≠â",
    2: "‰ΩøÁî®HSK 1-2Á∫ßËØçÊ±áÔºà300‰∏™ËØçÊ±áÔºâÔºöÂèØ‰ª•ÂåÖÂê´Êõ¥Â§öÊó•Â∏∏Âä®ËØç„ÄÅÊñπ‰ΩçËØç„ÄÅÁÆÄÂçïËøûËØçÔºàÂíå„ÄÅ‰ΩÜÊòØÔºâ„ÄÅÂü∫Êú¨ÂâØËØçÔºàÂæà„ÄÅÂ§™„ÄÅÈÉΩÔºâÁ≠â",
    3: "‰ΩøÁî®HSK 1-3Á∫ßËØçÊ±áÔºà600‰∏™ËØçÊ±áÔºâÔºöÂèØ‰ª•‰ΩøÁî®Â§çÂêàÂè•„ÄÅÊõ¥Â§öÊó∂ÊÄÅË°®Ëææ„ÄÅ‰∏∞ÂØåÁöÑÂΩ¢ÂÆπËØçÂíåÂâØËØç„ÄÅÂü∫Êú¨ÁöÑËØ≠Ê≥ïÁªìÊûÑÁ≠â"
  };

  const getWordLimit = () => {
    if (maxWords) return maxWords;
    const defaultLimits = {
      dialogue: { 1: 120, 2: 180, 3: 250 },
      paragraph: { 1: 150, 2: 220, 3: 300 },
      story: { 1: 200, 2: 280, 3: 400 },
    };
    return defaultLimits[type][level as keyof typeof defaultLimits[typeof type]];
  };

  const wordLimit = getWordLimit();

  const typeDescriptions = {
    dialogue: 'ÁîüÂä®ÂØπËØù (2-4‰∫∫Ëá™ÁÑ∂ÂØπËØùÔºåËØ≠Ë®ÄÁúüÂÆûÔºåÊÉÖÊÑü‰∏∞ÂØå)',
    paragraph: 'Ê∑±Â∫¶ÂèôËø∞ (ËØ¶ÁªÜÊèèÂÜôÔºåÂ±ÇÊ¨°ÂàÜÊòéÔºåÂÜÖÂÆπÂÖÖÂÆû)',
    story: 'ÂÆåÊï¥ÊïÖ‰∫ã (ÊÉÖËäÇÂÆåÊï¥Ôºå‰∫∫Áâ©È≤úÊòéÔºåÂØìÊÑèÊ∑±Âàª)'
  };

  return `‰Ω†ÊòØÈ°∂Â∞ñÁöÑ‰∏≠ÊñáÊïôÂ≠¶‰∏ìÂÆ∂ÔºåÊ≠£Âú®‰∏∫HSK ${level}Á∫ßÂ≠¶ÁîüÁ≤æÂøÉËÆæËÆ°ÈòÖËØªÁêÜËß£ÁªÉ‰π†„ÄÇ

üéØ ‰ªäÊó•Âàõ‰Ωú‰ªªÂä°Ôºö
üí° Ê†∏ÂøÉ‰∏ªÈ¢òÔºö„Äå${randomTheme}„Äç
üé¨ ÊïÖ‰∫ãÂú∫ÊôØÔºö${randomScenario}
üë• ‰∏ªË¶Å‰∫∫Áâ©Ôºö${randomCharacters}
üè¢ ÁéØÂ¢ÉËÆæÂÆöÔºö${randomSetting}
üìà ÊÉÖËäÇÂèëÂ±ïÔºö${randomPlot}
üíù ÊÉÖÊÑüÂü∫Ë∞ÉÔºö${randomEmotion}

‚úçÔ∏è Âàõ‰ΩúÊ†áÂáÜÔºö
1. ÊñáÊú¨Á±ªÂûãÔºö${typeDescriptions[type as keyof typeof typeDescriptions]}
2. ËØçÊ±áË¶ÅÊ±ÇÔºö${hskRequirements[level as keyof typeof hskRequirements]}
3. ÁØáÂπÖÊéßÂà∂Ôºö${Math.floor(wordLimit * 0.8)}-${wordLimit}‰∏™Ê±âÂ≠ó
4. ËØ≠Ë®ÄÈ£éÊ†ºÔºöÂú∞ÈÅìËá™ÁÑ∂ÔºåÁ¨¶Âêà‰∏≠ÂõΩ‰∫∫Ë°®Ëææ‰π†ÊÉØ
5. ÂÜÖÂÆπÊ∑±Â∫¶ÔºöÂØåÊúâÊïôËÇ≤ÊÑè‰πâÔºåÂêØÂèëÂ≠¶ÁîüÊÄùËÄÉ

üß† È¢òÁõÆËÆæËÆ°ÈáçÁÇπÔºö
- ÊÄªÈ¢òÊï∞Ôºö${questionCount}ÈÅìÁ≤æÂìÅÈÄâÊã©È¢ò
- Ê†∏ÂøÉËÄÉÊü•Ôºö${randomQuestionFocus}
- ÈöæÂ∫¶ÂàÜÂ∏ÉÔºöÂæ™Â∫èÊ∏êËøõÔºåÊúÄÂêé1-2È¢òÂÖ∑ÊúâÊåëÊàòÊÄß
- ÈÄâÈ°πËÆæËÆ°ÔºöÊØè‰∏™Âπ≤Êâ∞È°πÈÉΩË¶ÅÂêàÁêÜÂèØ‰ø°
- Á≠îÊ°àÂπ≥Ë°°ÔºöA„ÄÅB„ÄÅC„ÄÅDÈÄâÈ°πÂàÜÂ∏ÉÂùáÂåÄ

üî• Ë¥®ÈáèË¶ÅÊ±ÇÔºö
- ÊïÖ‰∫ãË¶ÅÊúâËµ∑‰ºèÔºå‰∏çËÉΩÂπ≥Èì∫Áõ¥Âèô
- ‰∫∫Áâ©ÂØπËØùË¶Å‰∏™ÊÄßÂåñÔºåÁ¨¶ÂêàË∫´‰ªΩÁâπÁÇπ
- ÁªÜËäÇÊèèÂÜôË¶Å‰∏∞ÂØåÔºåÂ¢ûÂº∫ÁîªÈù¢ÊÑü
- ÊÉÖÊÑüË°®ËææË¶ÅÁúüÊåöÔºåÂºïËµ∑ËØªËÄÖÂÖ±È∏£
- ËØ≠Ë®ÄË°®ËææË¶Å‰ºòÁæéÔºå‰ΩÜ‰∏çË∂ÖÂá∫HSK ${level}Á∫ßËåÉÂõ¥

ËØ∑ÊåâÁÖßJSONÊ†ºÂºèËøîÂõûÔºå‰∏çË¶Å‰ªª‰ΩïÈ¢ùÂ§ñÊ†áËÆ∞Ôºö
{
  "readingText": "Á≤æÂøÉÂàõ‰ΩúÁöÑÈòÖËØªÂÜÖÂÆπÔºåÁ°Æ‰øùËææÂà∞Â≠óÊï∞Ë¶ÅÊ±Ç",
  "wordCount": ÂáÜÁ°ÆÁöÑÂ≠óÊï∞ÁªüËÆ°,
  "questions": [
    {
      "question": "ÈóÆÈ¢òÂÜÖÂÆπÔºü",
      "options": {
        "A": "ÈÄâÈ°πAÂÜÖÂÆπ",
        "B": "ÈÄâÈ°πBÂÜÖÂÆπ", 
        "C": "ÈÄâÈ°πCÂÜÖÂÆπ",
        "D": "ÈÄâÈ°πDÂÜÖÂÆπ"
      },
      "answer": "Ê≠£Á°ÆÁ≠îÊ°àÂ≠óÊØç",
      "type": "È¢òÁõÆÁ±ªÂûã(ÁêÜËß£/Êé®ÁêÜ/ÁªÜËäÇ)"
    }
  ]
}`;
}

// H√†m t·∫°o prompt tƒ©nh (gi·ªØ nguy√™n logic c≈©)
function generateStaticReadingPrompt(options: GenerateChineseReadingExerciseOptions): string {
  const { level, type, maxWords, questionCount = 5 } = options;

  const hskRequirements = {
    1: "Âè™‰ΩøÁî®HSK 1Á∫ßËØçÊ±áÔºà150‰∏™ÊúÄÂü∫Á°ÄËØçÊ±áÔºâÔºö‰∫∫Áß∞‰ª£ËØç„ÄÅÂü∫Êú¨Âä®ËØçÔºàÊòØ„ÄÅÊúâ„ÄÅÂéª„ÄÅÊù•„ÄÅÂêÉ„ÄÅÂñùÔºâ„ÄÅÊï∞Â≠ó„ÄÅÊó∂Èó¥„ÄÅÂÆ∂Â∫≠ÊàêÂëò„ÄÅÈ¢úËâ≤„ÄÅÁÆÄÂçïÂΩ¢ÂÆπËØçÁ≠â",
    2: "‰ΩøÁî®HSK 1-2Á∫ßËØçÊ±áÔºà300‰∏™ËØçÊ±áÔºâÔºöÂèØ‰ª•ÂåÖÂê´Êõ¥Â§öÊó•Â∏∏Âä®ËØç„ÄÅÊñπ‰ΩçËØç„ÄÅÁÆÄÂçïËøûËØçÔºàÂíå„ÄÅ‰ΩÜÊòØÔºâ„ÄÅÂü∫Êú¨ÂâØËØçÔºàÂæà„ÄÅÂ§™„ÄÅÈÉΩÔºâÁ≠â",
    3: "‰ΩøÁî®HSK 1-3Á∫ßËØçÊ±áÔºà600‰∏™ËØçÊ±áÔºâÔºöÂèØ‰ª•‰ΩøÁî®Â§çÂêàÂè•„ÄÅÊõ¥Â§öÊó∂ÊÄÅË°®Ëææ„ÄÅ‰∏∞ÂØåÁöÑÂΩ¢ÂÆπËØçÂíåÂâØËØç„ÄÅÂü∫Êú¨ÁöÑËØ≠Ê≥ïÁªìÊûÑÁ≠â"
  };

  const getWordLimit = () => {
    if (maxWords) return maxWords;
    const defaultLimits = {
      dialogue: { 1: 120, 2: 180, 3: 250 },
      paragraph: { 1: 150, 2: 220, 3: 300 },
      story: { 1: 200, 2: 280, 3: 400 },
    };
    return defaultLimits[type][level as keyof typeof defaultLimits[typeof type]];
  };

  const wordLimit = getWordLimit();

  const typeDescriptions = {
    dialogue: 'Â§ö‰∫∫ÂØπËØù (3-4‰∫∫ÂØπËØùÔºåÊÉÖËäÇ‰∏∞ÂØåÔºåÊúâËµ∑ÊâøËΩ¨ÂêàÔºå‰∫∫Áâ©ÊÄßÊ†ºÈ≤úÊòé)',
    paragraph: 'ÂèôËø∞ÊñáÁ´† (ËØ¶ÁªÜÊèèËø∞‰∏Ä‰∏™‰∏ªÈ¢òÔºåÂåÖÂê´Â§ö‰∏™ÊñπÈù¢ÂíåÁªÜËäÇ)',
    story: 'ÂÆåÊï¥ÊïÖ‰∫ã (ÊúâÂºÄÂ§¥„ÄÅÂèëÂ±ï„ÄÅÈ´òÊΩÆ„ÄÅÁªìÂ∞æÁöÑÂÆåÊï¥Âèô‰∫ãÔºå‰∫∫Áâ©ÂíåÊÉÖËäÇÂèëÂ±ïÊ∏ÖÊô∞)'
  };

  const contentThemes = {
    1: "ÂÆ∂Â∫≠ÁîüÊ¥ª„ÄÅÂ≠¶Ê†°Êó•Â∏∏„ÄÅË¥≠Áâ©ÂêÉÈ•≠„ÄÅËá™Êàë‰ªãÁªç„ÄÅÁÆÄÂçïÁöÑÊó•Â∏∏Ê¥ªÂä®",
    2: "ÊúãÂèãËÅö‰ºö„ÄÅÊóÖË°åÁªèÂéÜ„ÄÅÂ∑•‰ΩúÂ≠¶‰π†„ÄÅÂÖ¥Ë∂£Áà±Â•Ω„ÄÅËäÇÊó•Â∫ÜÁ•ù„ÄÅÁÆÄÂçïÁöÑ‰∫∫ÈôÖÂÖ≥Á≥ª",
    3: "ÁîüÊ¥ªÂèòÂåñ„ÄÅÊàêÈïøÁªèÂéÜ„ÄÅÊú™Êù•ËÆ°Âàí„ÄÅÊñáÂåñÂ∑ÆÂºÇ„ÄÅÁ§æ‰ºöÁé∞Ë±°„ÄÅ‰∫∫ÁîüÊÑüÊÇü"
  };

  return `‰Ω†ÊòØËµÑÊ∑±ÁöÑ‰∏≠ÊñáÊïôÂ∏àÂíåÊïôÊùêÁºñÂÜô‰∏ìÂÆ∂ÔºåËØ∑ÂàõÂª∫‰∏Ä‰∏™HSK ${level}Á∫ßÂà´ÁöÑÈ´òË¥®Èáè‰∏≠ÊñáÈòÖËØªÁêÜËß£ÁªÉ‰π†„ÄÇ

üìã Âü∫Êú¨Ë¶ÅÊ±ÇÔºö
1. ÂÜÖÂÆπÁ±ªÂûãÔºö${typeDescriptions[type as keyof typeof typeDescriptions]}
2. ËØçÊ±áÊ†áÂáÜÔºö${hskRequirements[level as keyof typeof hskRequirements]}
3. ËØ≠Ê≥ïË¶ÅÊ±ÇÔºö‰∏•Ê†ºÈÅµÂæ™HSK ${level}Á∫ßËØ≠Ê≥ïËßÑËåÉÔºåÂè•ÂºèÁî±ÁÆÄÂà∞ÁπÅÔºåÂæ™Â∫èÊ∏êËøõ
4. ÈïøÂ∫¶Ê†áÂáÜÔºöÂÖ®ÊñáÂøÖÈ°ªËææÂà∞${Math.floor(wordLimit * 0.8)}-${wordLimit}‰∏™Ê±âÂ≠ó
5. ‰∏ªÈ¢òËåÉÂõ¥Ôºö${contentThemes[level as keyof typeof contentThemes]}

üéØ ÂÜÖÂÆπÊ∑±Â∫¶Ë¶ÅÊ±ÇÔºö
- ÊïÖ‰∫ã/ÂØπËØùË¶ÅÊúâÂÆåÊï¥ÁöÑÊÉÖËäÇÂèëÂ±ïÔºå‰∏çËÉΩËøá‰∫éÁÆÄÂçï
- ‰∫∫Áâ©ÂΩ¢Ë±°Ë¶ÅÈ≤úÊòéÔºåÂØπËØùË¶ÅËá™ÁÑ∂ÊµÅÁïÖ
- ÂåÖÂê´‰∏∞ÂØåÁöÑÁîüÊ¥ªÁªÜËäÇÂíåÊÉÖÊÑüË°®Ëææ
- ËØ≠Ë®ÄË°®ËææË¶ÅÂú∞ÈÅìÔºåÁ¨¶Âêà‰∏≠ÂõΩ‰∫∫Êó•Â∏∏‰∫§ÊµÅ‰π†ÊÉØ
- ÈÅøÂÖçÁîüÁ°¨ÁöÑÊïôÂ≠¶ÂºèËØ≠Ë®ÄÔºåË¶ÅÁîüÂä®ÊúâË∂£

üìù È¢òÁõÆËÆæËÆ°Ê†áÂáÜÔºö
- ÂàõÂª∫${questionCount}ÈÅìÈ´òË¥®ÈáèÈÄâÊã©È¢ò
- È¢òÂûãÂàÜÂ∏ÉÔºöÁêÜËß£È¢ò(${Math.ceil(questionCount * 0.4)}ÈÅì) + Êé®ÁêÜÈ¢ò(${Math.floor(questionCount * 0.4)}ÈÅì) + ÁªÜËäÇÈ¢ò(${questionCount - Math.ceil(questionCount * 0.4) - Math.floor(questionCount * 0.4)}ÈÅì)
- ÈöæÂ∫¶Ê¢ØÂ∫¶ÔºöÁî±ÊòìÂà∞ÈöæÔºåÊúÄÂêé1-2È¢òÊúâ‰∏ÄÂÆöÊåëÊàòÊÄß
- Âπ≤Êâ∞ÈÄâÈ°πË¶ÅÂêàÁêÜÔºåÈÅøÂÖçÊòéÊòæÈîôËØØÁöÑÈÄâÈ°π
- Á≠îÊ°àÂàÜÂ∏ÉË¶ÅÂùáÂåÄÔºàA„ÄÅB„ÄÅC„ÄÅDÈÄâÈ°πÈÉΩË¶ÅÊúâÔºâ

üîç Ë¥®ÈáèÊ£ÄÊü•Ôºö
- Á°Æ‰øùÊâÄÊúâËØçÊ±áÈÉΩÂú®HSK ${level}Á∫ßËåÉÂõ¥ÂÜÖ
- ËØ≠Ê≥ïÁªìÊûÑÁ¨¶ÂêàËØ•Á∫ßÂà´Â≠¶‰π†ËÄÖÊ∞¥Âπ≥
- ÂÜÖÂÆπÁßØÊûÅÂêë‰∏äÔºåÂØåÊúâÊïôËÇ≤ÊÑè‰πâ
- È¢òÁõÆÊµãËØïÂ≠¶ÁîüÁöÑÁúüÂÆûÁêÜËß£ËÉΩÂäõÔºåËÄåÈùûÁåúÊµã

ËØ∑‰∏•Ê†ºÊåâÁÖß‰ª•‰∏ãJSONÊ†ºÂºèËøîÂõûÔºå‰∏çË¶ÅÊ∑ªÂä†‰ªª‰ΩïmarkdownÊ†áËÆ∞„ÄÅÊ≥®ÈáäÊàñÈ¢ùÂ§ñËß£ÈáäÔºö

{
  "readingText": "ÂÆåÊï¥ÁöÑÈòÖËØªÂÜÖÂÆπÔºåÁ°Æ‰øùËææÂà∞ËßÑÂÆöÂ≠óÊï∞",
  "wordCount": ÂÆûÈôÖÂ≠óÊï∞,
  "questions": [
    {
      "question": "ÈóÆÈ¢òÂÜÖÂÆπÔºü",
      "options": {
        "A": "ÈÄâÈ°πAÂÜÖÂÆπ",
        "B": "ÈÄâÈ°πBÂÜÖÂÆπ", 
        "C": "ÈÄâÈ°πCÂÜÖÂÆπ",
        "D": "ÈÄâÈ°πDÂÜÖÂÆπ"
      },
      "answer": "Ê≠£Á°ÆÁ≠îÊ°àÂ≠óÊØç",
      "type": "È¢òÁõÆÁ±ªÂûã(ÁêÜËß£/Êé®ÁêÜ/ÁªÜËäÇ)"
    }
  ]
}`;
}

export async function generateChineseReadingExercise({
  level,
  type,
  maxWords,
  questionCount = 5,
  useDynamicPrompt = true
}: GenerateChineseReadingExerciseOptions) {

  const gemini = getGeminiClient();

  // Ch·ªçn lo·∫°i prompt ƒë·ªÉ s·ª≠ d·ª•ng
  const prompt = useDynamicPrompt 
    ? generateDynamicReadingPrompt({ level, type, maxWords, questionCount })
    : generateStaticReadingPrompt({ level, type, maxWords, questionCount });

  console.log(`üìö S·ª≠ d·ª•ng ${useDynamicPrompt ? 'Dynamic' : 'Static'} Prompt cho HSK ${level} Reading - ${type}`);

  const model = gemini.getGenerativeModel({
    model: 'gemini-1.5-flash',
    generationConfig: {
      temperature: useDynamicPrompt ? 0.4 : 0.3, // Dynamic c√≥ creativity cao h∆°n
      topP: 0.8,
      topK: 40,
      responseMimeType: "application/json"
    }
  });

  try {
    const result = await model.generateContent(prompt);
    const content = result.response?.text();

    const cleanContent = content?.replace(/```json\n?|\n?```/g, '') || '';
    const parsedResult = JSON.parse(cleanContent);

    // Validation
    if (!parsedResult.readingText || !Array.isArray(parsedResult.questions)) {
      throw new Error('‚ùå Missing required fields: readingText or questions');
    }

    if (parsedResult.questions.length !== questionCount) {
      console.warn(`‚ö†Ô∏è ÈóÆÈ¢òÊï∞Èáè‰∏çÂåπÈÖç: ÊúüÊúõ${questionCount}ÈÅìÔºåÂÆûÈôÖ${parsedResult.questions.length}ÈÅì`);
    }

    // Validate t·ª´ng c√¢u h·ªèi
    for (const [index, q] of parsedResult.questions.entries()) {
      if (!q.question || !q.options || !q.answer) {
        throw new Error(`‚ùå Á¨¨${index + 1}È¢òÁº∫Â∞ëÂøÖË¶ÅÂ≠óÊÆµ`);
      }
      const requiredOptions = ['A', 'B', 'C', 'D'];
      for (const option of requiredOptions) {
        if (!q.options[option]) {
          throw new Error(`‚ùå Á¨¨${index + 1}È¢òÁº∫Â∞ëÈÄâÈ°π${option}`);
        }
      }
      if (!requiredOptions.includes(q.answer)) {
        throw new Error(`‚ùå Á¨¨${index + 1}È¢òÁ≠îÊ°àÊó†Êïà: ${q.answer}`);
      }
    }

    // Ki·ªÉm tra ƒë·ªô d√†i
    const actualWordCount = parsedResult.readingText.replace(/[^\u4e00-\u9fa5]/g, '').length;
    const getWordLimit = () => {
      if (maxWords) return maxWords;
      const defaultLimits = {
        dialogue: { 1: 120, 2: 180, 3: 250 },
        paragraph: { 1: 150, 2: 220, 3: 300 },
        story: { 1: 200, 2: 280, 3: 400 },
      };
      return defaultLimits[type][level as keyof typeof defaultLimits[typeof type]];
    };
    
    const wordLimit = getWordLimit();
    const minWords = Math.floor(wordLimit * 0.8);

    if (actualWordCount < minWords) {
      console.warn(`‚ö†Ô∏è ÊñáÊú¨ÈïøÂ∫¶‰∏çË∂≥: ÂÆûÈôÖ${actualWordCount}Â≠óÔºåË¶ÅÊ±ÇËá≥Â∞ë${minWords}Â≠ó`);
    }

    if (!parsedResult.wordCount) {
      parsedResult.wordCount = actualWordCount;
    }

    console.log(`‚úÖ ÊàêÂäüÁîüÊàêHSK ${level}Á∫ß${type}ÈòÖËØªÁªÉ‰π†ÔºåÂÖ±${actualWordCount}Â≠óÔºå${questionCount}ÈÅìÈ¢ò`);

    return parsedResult;

  } catch (err: any) {
    console.error('‚ùå GeminiËøîÂõûJSONËß£ÊûêÂ§±Ë¥•:', err);
    
    if (err.message?.includes('API key')) {
      throw new Error('‚ùå API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra GEMINI_API_KEY.');
    } else if (err.message?.includes('quota') || err.message?.includes('limit')) {
      throw new Error('‚ùå ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API. Vui l√≤ng th·ª≠ l·∫°i sau.');
    } else if (err.message?.includes('JSON')) {
      throw new Error('‚ùå Gemini tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.');
    } else {
      throw new Error(`‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: ${err.message || 'Unknown error'}`);
    }
  }
}

// Helper function ƒë·ªÉ test API connection
export async function testGeminiConnection(): Promise<boolean> {
  try {
    const genAI = getGeminiClient();
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    
    const result = await model.generateContent("Say 'Hello' in Chinese");
    const response = await result.response;
    const text = response.text();
    
    console.log('‚úÖ Gemini API connection successful:', text);
    return true;
  } catch (error) {
    console.error('‚ùå Gemini API connection failed:', error);
    return false;
  }
}

// H√†m preview prompt
export function previewReadingPrompt(options: GenerateChineseReadingExerciseOptions): string {
  const { useDynamicPrompt = true } = options;
  return useDynamicPrompt 
    ? generateDynamicReadingPrompt(options)
    : generateStaticReadingPrompt(options);
}

// H√†m ph√¢n t√≠ch c√¢u h·ªèi theo lo·∫°i
export function analyzeQuestionTypes(questions: any[]): { 
  ÁêÜËß£: number, 
  Êé®ÁêÜ: number, 
  ÁªÜËäÇ: number,
  ÂÖ∂‰ªñ: number 
} {
  const analysis = { ÁêÜËß£: 0, Êé®ÁêÜ: 0, ÁªÜËäÇ: 0, ÂÖ∂‰ªñ: 0 };
  
  questions.forEach(q => {
    const type = q.type || 'ÂÖ∂‰ªñ';
    if (analysis.hasOwnProperty(type)) {
      analysis[type as keyof typeof analysis]++;
    } else {
      analysis.ÂÖ∂‰ªñ++;
    }
  });
  
  return analysis;
}